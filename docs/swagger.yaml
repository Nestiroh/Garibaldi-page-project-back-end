openapi: 3.0.0
info:
  title: Garibaldi API
  version: 1.0.0
  description: API for the El Gran Garibaldi restaurant

servers:
  - url: http://localhost:80/api
    description: Servidor local

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - bearerAuth: []

paths:
  /register:
    post:
      tags:
        - Autenticación
      summary: Registrar un nuevo usuario (envía un correo de confirmación)
      requestBody:
        description: Datos del nuevo usuario para registrarse en el restaurante El Gran Garibaldi
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nombre:
                  type: string
                  example: "Juan"
                email:
                  type: string
                  example: "juan@example.com"
                telefono:
                  type: string
                  example: "3123456789"
                contrasena:
                  type: string
                  example: "password123"
      responses:
        200:
          description: Correo de confirmación enviado
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Correo de confirmación enviado. Por favor, revisa tu correo electrónico."
        400:
          description: Datos incompletos
        500:
          description: Error al registrar el usuario

  /confirmar:
    get:
      tags:
        - Autenticación
      summary: Confirmar el registro del usuario
      parameters:
        - name: token
          in: query
          description: Token de confirmación enviado al correo electrónico
          required: true
          schema:
            type: string
      responses:
        201:
          description: Cuenta confirmada con éxito
          content:
            application/json:
              schema:
                type: object
                properties:
                  id_usuario:
                    type: integer
                    example: 1
                  nombre:
                    type: string
                    example: "Juan"
                  email:
                    type: string
                    example: "juan@example.com"
                  telefono:
                    type: string
                    example: "3123456789"
                  rol:
                    type: string
                    example: "default"
                  message:
                    type: string
                    example: "Cuenta confirmada con éxito."
        400:
          description: Token de confirmación no proporcionado o inválido
        500:
          description: Error al confirmar la cuenta

  /login:
    post:
      tags:
        - Autenticación
      summary: Iniciar sesión (requiere cuenta confirmada)
      requestBody:
        description: Datos de autenticación para iniciar sesión
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "juan@example.com"
                contrasena:
                  type: string
                  example: "password123"
      responses:
        200:
          description: Inicio de sesión exitoso
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  rol:
                    type: string
                    example: "Administrador"
        401:
          description: Credenciales incorrectas
        403:
          description: Cuenta no confirmada, por favor confirma tu cuenta
        500:
          description: Error al iniciar sesión


  /show-users:
    get:
      tags:
        - Usuarios
      summary: Obtener todos los usuarios (Solo administrador)
      security:
        - bearerAuth: []
      responses:
        200:
          description: Lista de usuarios obtenida con éxito
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id_usuario:
                      type: integer
                      example: 1
                    nombre:
                      type: string
                      example: "Juan"
                    email:
                      type: string
                      example: "juan@example.com"
                    telefono:
                      type: string
                      example: "3123456789"
                    contrasena_encriptada:
                      type: string
                      example: "$argon2id$v=19$m=65536,t=3,p=4$..."
                    rol:
                      type: string
                      example: "default"
        500:
          description: Error al obtener los usuarios

  /show-users/{id}:
    get:
      tags:
        - Usuarios
      summary: Obtener un usuario por ID (Solo administrador)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            example: 1
      responses:
        200:
          description: Detalles del usuario obtenidos con éxito
          content:
            application/json:
              schema:
                type: object
                properties:
                  id_usuario:
                    type: integer
                    example: 1
                  nombre:
                    type: string
                    example: "Juan"
                  email:
                    type: string
                    example: "juan@example.com"
                  telefono:
                    type: string
                    example: "3123456789"
                  contrasena_encriptada:
                    type: string
                    example: "$argon2id$v=19$m=65536,t=3,p=4$..."
                  rol:
                    type: string
                    example: "default"
        404:
          description: Usuario no encontrado
        500:
          description: Error al obtener el usuario

  /create-user:
    post:
      tags:
        - Usuarios
      summary: Crear un nuevo usuario (Solo administrador)
      security:
        - bearerAuth: []
      requestBody:
        description: Datos para crear el nuevo usuario
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nombre:
                  type: string
                  example: "Juan"
                email:
                  type: string
                  example: "juan@example.com"
                telefono:
                  type: string
                  example: "3123456789"
                contrasena:
                  type: string
                  example: "password123"
                rol:
                  type: string
                  example: "default"
      responses:
        201:
          description: Usuario creado con éxito
        400:
          description: Datos incompletos
        500:
          description: Error al crear el usuario

  /delete-user/{email}:
    delete:
      tags:
        - Usuarios
      summary: Eliminar un usuario por email (Solo administrador)
      security:
        - bearerAuth: []
      parameters:
        - name: email
          in: path
          required: true
          schema:
            type: string
            example: user@example.com  
      responses:
        200:
          description: Usuario eliminado con éxito
        404:
          description: Usuario no encontrado
        500:
          description: Error al eliminar el usuario
  /update-user/{email}:
    put:
      tags:
        - Usuarios
      summary: Actualizar un usuario por email (Solo administrador)
      security:
        - bearerAuth: []
      parameters:
        - name: email
          in: path
          required: true
          description: Email del usuario a actualizar
          schema:
            type: string
            example: "user@example.com"
      requestBody:
        description: Datos para actualizar el usuario (solo campos presentes serán actualizados)
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nombre:
                  type: string
                  example: "Juan"
                nuevo_email:
                  type: string
                  example: "nuevo_email@example.com"
                telefono:
                  type: string
                  example: "3123456789"
                rol:
                  type: string
                  example: "Mesero"
      responses:
        200:
          description: Usuario actualizado con éxito
        400:
          description: Datos incompletos
        404:
          description: Usuario no encontrado
        500:
          description: Error al actualizar el usuario

  /comments:
    post:
      tags:
        - Comentarios
      summary: Crear un nuevo comentario 
      security:
        - bearerAuth: []
      requestBody:
        description: Datos del nuevo comentario
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                titulo:
                  type: string
                  example: "Excelente servicio"
                calificacion:
                  type: integer
                  example: 5
                comentario:
                  type: string
                  example: "La comida fue fantástica y el servicio increíble."
      responses:
        201:
          description: Comentario creado con éxito
        400:
          description: Datos incompletos
        401:
          description: No autorizado, es necesario estar logueado

    get:
      tags:
        - Comentarios
      summary: Obtener todos los comentarios (Solo administrador), obtener los aprobados (Usuarios)
      security:
        - bearerAuth: []
      responses:
        200:
          description: Lista de comentarios obtenida con éxito 
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id_comentario:
                      type: integer
                      example: 1
                    id_usuario:
                      type: integer
                      example: 1
                    titulo:
                      type: string
                      example: "Excelente servicio"
                    calificacion:
                      type: integer
                      example: 5
                    comentario:
                      type: string
                      example: "La comida fue fantástica y el servicio increíble."
                    fecha_comentario:
                      type: string
                      example: "2024-10-05T12:34:56Z"
                    estado:
                      type: string
                      enum: ['Pendiente', 'Aprobado', 'Rechazado']
                      example: "Pendiente"
        401:
          description: No autorizado, es necesario estar logueado
        500:
          description: Error al obtener los comentarios

  /comments/{id_comentario}:
    patch:
      tags:
        - Comentarios
      summary: Cambiar el estado de un comentario (Solo administrador)
      security:
        - bearerAuth: []
      parameters:
        - name: id_comentario
          in: path
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        description: Estado a modificar
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                estado:
                  type: string
                  enum: ['Pendiente', 'Aprobado', 'Rechazado']
                  example: "Aprobado"
      responses:
        200:
          description: Estado del comentario modificado con éxito
        400:
          description: Datos incompletos o incorrectos
        401:
          description: No autorizado, solo administradores pueden modificar el estado
        404:
          description: Comentario no encontrado
        500:
          description: Error al modificar el estado del comentario
  /reservations:
    post:
      summary: Crea una nueva reserva
      description: Crea una nueva reserva en el sistema con los detalles del usuario, incluyendo la cantidad de personas, horario de la reserva, comentarios adicionales, y si hay niños acompañantes.
      tags:
        - Reservas
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                cantidad_personas:
                  type: integer
                  example: 2
                  description: Número de personas para la reserva
                horario_reserva:
                  type: string
                  format: date-time
                  example: "2024-10-12T19:00:00"
                  description: Fecha y hora de la reserva (en formato ISO 8601)
                comentarios_adicionales:
                  type: string
                  example: "No quiero las mesas pegadas"
                  description: Comentarios adicionales relacionados con la reserva
                hay_nino:
                  type: boolean
                  example: true
                  description: Indica si hay niños acompañando en la reserva
                rango_edad_nino:
                  type: string
                  example: "2-3"
                  description: Rango de edad de los niños si hay niños en la reserva (por ejemplo, "2-3")
                motivo_reserva:
                  type: string
                  example: "cumpleaños_hombre"
                  description: Motivo de la reserva (por ejemplo, "cumpleaños_hombre", "aniversario", etc.)
      responses:
        201:
          description: Reserva creada exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  id_reserva:
                    type: integer
                    example: 123
                    description: ID de la reserva creada
                  mensaje:
                    type: string
                    example: "Reserva creada exitosamente"
        400:
          description: Error en la solicitud
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Datos inválidos en la solicitud"

    get:
      summary: Obtener todas las reservas (Administrador)
      description: Devuelve una lista de todas las reservas registradas, junto con la información del usuario que realizó cada reserva.
      tags:
        - Reservas
      responses:
        '200':
          description: Operación exitosa. Se devuelven las reservas.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id_reserva:
                      type: integer
                      example: 123
                      description: ID único de la reserva
                    cantidad_personas:
                      type: integer
                      example: 4
                      description: Número de personas en la reserva
                    horario_reserva:
                      type: string
                      format: date-time
                      example: '2024-10-20T19:00:00'
                      description: Fecha y hora de la reserva
                    comentarios_adicionales:
                      type: string
                      example: 'Mesa cerca de la ventana'
                      description: Comentarios adicionales del usuario
                    hay_nino:
                      type: boolean
                      example: true
                      description: Indica si hay niños en la reserva
                    rango_edad_nino:
                      type: string
                      example: '2-3'
                      description: Rango de edad de los niños
                    motivo_reserva:
                      type: string
                      example: 'cumpleaños_hombre'
                      description: Motivo de la reserva
                    usuario_nombre:
                      type: string
                      example: 'Juan Pérez'
                      description: Nombre del usuario que realizó la reserva
                    usuario_email:
                      type: string
                      format: email
                      example: 'juan.perez@example.com'
                      description: Correo electrónico del usuario
        '500':
          description: Error interno del servidor.
          
  /delete-reservation/{id_reserva}:
    delete:
      tags:
        - Reservas
      summary: Eliminar una reserva por ID (Solo administrador)
      security:
        - bearerAuth: []
      parameters:
        - name: id_reserva
          in: path
          required: true
          schema:
            type: integer
            example: 1
          description: ID de la reserva a eliminar
      responses:
        200:
          description: Reserva eliminada con éxito
        404:
          description: Reserva no encontrada
        500:
          description: Error al eliminar la reserva

  /report/{month}/{year}:
    get:
      summary: "Generar un reporte mensual de reservas (Solo administrador)"
      description: "Genera un PDF con todas las reservas del mes y año especificados, visible solo para administradores."
      tags:
        - "Reservas"
      parameters:
        - name: "month"
          in: "path"
          required: true
          type: "integer"
          description: "Mes para el cual se generará el reporte (1-12)."
          example: 10
        - name: "year"
          in: "path"
          required: true
          type: "integer"
          description: "Año para el cual se generará el reporte."
          example: 2024
      responses:
        200:
          description: "Reporte generado exitosamente."
        400:
          description: "Mes y/o año inválidos."
        404:
          description: "No se encontraron reservas para el mes y año especificados."
        500:
          description: "Error interno del servidor al generar el reporte."
  /add-image:
    post:
      tags:
        - Multimedia
      summary: Subir una nueva imagen (Solo administradores)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                  description: Imagen a subir (JPG o PNG)
                seccion:
                  type: string
                  enum: ['Inicio', 'Nosotros', 'Shows', 'Agrupaciones']
                  example: 'Inicio'
      responses:
        201:
          description: Imagen agregada con éxito
        400:
          description: Todos los campos son obligatorios
        500:
          description: Error al subir la imagen

  /delete-image/{id_foto}:
    delete:
      tags:
        - Multimedia
      summary: Eliminar una imagen por id (Solo administradores)
      security:
        - bearerAuth: []
      parameters:
        - name: id_foto
          in: path
          required: true
          schema:
            type: integer
            example: 5
      responses:
        200:
          description: Imagen eliminada con éxito
        404:
          description: Imagen no encontrada
        500:
          description: Error al eliminar la imagen

  /images:
    get:
      tags:
        - Multimedia
      summary: Obtener todas las imágenes activas
      responses:
        200:
          description: Lista de imágenes activas
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id_foto:
                      type: integer
                    id_usuario:
                      type: integer
                    url_foto:
                      type: string
                    seccion:
                      type: string
                    estado:
                      type: integer
        500:
          description: Error al obtener las imágenes
  /orders:
    post:
      tags:
        - Ordenes
      summary: Crear una nueva orden (Solo meseros)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                numero_mesa:
                  type: integer
                  description: Número de la mesa donde se crea la orden. Debe existir en la base de datos.
                  example: 2
                productos:
                  type: array
                  description: Lista de productos en la orden.
                  items:
                    type: object
                    properties:
                      id_producto:
                        type: integer
                        description: ID del producto que se ordena.
                        example: 1
                      cantidad:
                        type: integer
                        description: Cantidad del producto en la orden.
                        example: 2
                      comentarios:
                        type: string
                        description: Comentarios adicionales para el producto (opcional).
                        example: "Sin cebolla"
              required:
                - numero_mesa
                - productos
      responses:
        201:
          description: Orden creada con éxito
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Orden creada con éxito"
                  id_orden:
                    type: integer
                    example: 123
        400:
          description: Todos los campos son obligatorios y debe haber al menos un producto en la orden
        404:
          description: La mesa especificada no existe
        500:
          description: Error al crear la orden


  /orders/pending:
    get:
      tags:
        - Ordenes
      summary: Obtener órdenes pendientes en preparación
      security:
        - bearerAuth: []
      responses:
        200:
          description: Lista de órdenes pendientes en preparación
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id_orden:
                      type: integer
                      example: 123
                    numero_mesa:
                      type: integer
                      example: 5
                    id_mesero:
                      type: integer
                      example: 3
                    fecha_orden:
                      type: string
                      format: date-time
                      example: "2024-10-12T12:00:00Z"
                    estado:
                      type: string
                      example: "Preparación"
                    id_producto:
                      type: integer
                      example: 1
                    nombre_producto:
                      type: string
                      example: "Pizza Margarita"  
                    cantidad:
                      type: integer
                      example: 2
                    comentarios:
                      type: string
                      example: "Sin cebolla"
        500:
          description: Error al obtener órdenes pendientes

  /products:
    get:
      tags:
        - Ordenes
      summary: Obtener todos los productos disponibles
      security:
        - bearerAuth: []
      responses:
        200:
          description: Lista de productos disponibles
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 12
                    nombre_producto:
                      type: string
                      example: "Burrito"
                    tipo:
                      type: string
                      enum:
                        - Plato
                        - Bebida
                      example: "Plato"
        500:
          description: Error al obtener productos



  /orders/kitchen:
    get:
      tags:
        - Cocina
      summary: Ver órdenes pendientes por cocinar
      security:
        - bearerAuth: []
      responses:
        200:
          description: Lista de órdenes pendientes en preparación
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id_orden:
                      type: integer
                      example: 123
                    numero_mesa:
                      type: integer
                      example: 5
                    id_mesero:
                      type: integer
                      example: 3
                    fecha_orden:
                      type: string
                      format: date-time
                      example: "2024-10-12T12:00:00Z"
                    estado:
                      type: string
                      example: "Preparación"
                    id_producto:
                      type: integer
                      example: 1
                    nombre_producto:
                      type: string
                      example: "Pasta"
                    cantidad:
                      type: integer
                      example: 2
                    comentarios:
                      type: string
                      example: "Sin cebolla"

  /orders/kitchen/{id_orden}/complete:
    put:
      tags:
        - Cocina
      summary: Marcar orden como completada
      security:
        - bearerAuth: []
      parameters:
        - name: id_orden
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Orden marcada como completada
        404:
          description: Orden no encontrada o ya completada
        500:
          description: Error al actualizar el estado de la orden

  /products/{id_producto}/availability:
    put:
      tags:
        - Cocina
      summary: Cambiar disponibilidad de un producto
      security:
        - bearerAuth: []
      parameters:
        - name: id_producto
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                disponible:
                  type: integer
                  description: Cambiar a 1 para disponible o 0 para no disponible
                  example: 1
      responses:
        200:
          description: Disponibilidad del producto actualizada
        404:
          description: Producto no encontrado
        500:
          description: Error al actualizar disponibilidad del producto
  /orders/bar:
    get:
      tags:
        - Bar
      summary: Ver órdenes pendientes de bebidas para el bar
      security:
        - bearerAuth: []
      responses:
        200:
          description: Lista de órdenes pendientes en preparación para el bar
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id_orden:
                      type: integer
                      example: 123
                    numero_mesa:
                      type: integer
                      example: 5
                    id_mesero:
                      type: integer
                      example: 3
                    fecha_orden:
                      type: string
                      format: date-time
                      example: "2024-10-12T12:00:00Z"
                    estado:
                      type: string
                      example: "Preparación"
                    id_producto:
                      type: integer
                      example: 1
                    nombre_producto:
                      type: string
                      example: "Cerveza"
                    cantidad:
                      type: integer
                      example: 2
                    comentarios:
                      type: string
                      example: "Con hielo"
        500:
          description: Error al obtener órdenes pendientes para el bar

  /orders/bar/{id_orden}/complete:
    put:
      tags:
        - Bar
      summary: Marcar orden de bebida como completada
      security:
        - bearerAuth: []
      parameters:
        - name: id_orden
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Orden marcada como completada en el bar
        404:
          description: Orden no encontrada o ya completada
        500:
          description: Error al actualizar el estado de la orden en el bar
          
  /cash/tables/{numero_mesa}:
    get:
      tags:
        - Caja
      summary: Obtener pedidos y total acumulado para una mesa
      description: Recupera los detalles de cada pedido de una mesa y el total acumulado de estos, incluyendo el estado de la orden y el estado del pago.
      security:
        - bearerAuth: []
      parameters:
        - name: numero_mesa
          in: path
          required: true
          description: Número de la mesa para obtener detalles
          schema:
            type: integer
      responses:
        200:
          description: Detalles de pedidos y total acumulado de una mesa
          content:
            application/json:
              schema:
                type: object
                properties:
                  orders:
                    type: array
                    items:
                      type: object
                      properties:
                        numero_mesa:
                          type: integer
                          example: 5
                        nombre_producto:
                          type: string
                          example: "Pasta"
                        cantidad:
                          type: integer
                          example: 2
                        precio:
                          type: float
                          example: 15.50
                        total_producto:
                          type: float
                          example: 31.00
                        estado_orden:
                          type: string
                          example: "Completado"
                        estado_pago:
                          type: string
                          example: "Pendiente"
                  total:
                    type: float
                    example: 45.50
        500:
          description: Error al obtener los pedidos y el total acumulado

  /cash/tables/{numero_mesa}/confirm:
    put:
      tags:
        - Caja
      summary: Confirmar pago de una mesa
      description: Cambia el estado de pago a "Pagado" y elimina los registros asociados de la mesa en caja, ordenes y detalles_orden.
      security:
        - bearerAuth: []
      parameters:
        - name: numero_mesa
          in: path
          required: true
          description: Número de la mesa a confirmar el pago
          schema:
            type: integer
      responses:
        200:
          description: Pago confirmado y registros eliminados para la mesa
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Pago confirmado y registros eliminados para la mesa"
        404:
          description: No se encontró un pedido pendiente para esta mesa
        500:
          description: Error al confirmar el pago
